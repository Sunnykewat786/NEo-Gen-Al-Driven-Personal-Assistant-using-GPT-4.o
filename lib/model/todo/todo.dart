import 'package:hive/hive.dart'; // Import for Hive, a lightweight database.

part 'todo.g.dart'; // This part file is generated by Hive and contains the adapter.  It's needed for Hive to work.

/// **üîπ Subtask Model**
/// Represents a subtask of a to-do item.  This class is used to define the structure of a subtask.
@HiveType(typeId: 6) // üîπ Unique type ID for Subtask.  This ID is used by Hive to store and retrieve objects of this type.  It must be unique across all Hive types in the application.
class Subtask {
  @HiveField(0)
  String title; // üìù Title of the subtask.  This is the text that describes the subtask.

  @HiveField(1)
  bool isCompleted; // ‚úÖ Status of the subtask (true if completed, false otherwise).

  /// Constructor for the Subtask class.
  /// [title] The title of the subtask.
  /// [isCompleted] The completion status of the subtask.
  Subtask({required this.title, required this.isCompleted});

  /// **üîπ Copy Subtask with New Values**
  /// Creates a new Subtask object with the same values as this one, except for any values that are explicitly overridden.
  /// This is a common pattern in Flutter to allow for efficient updating of immutable objects.
  /// [title] Optional new title for the subtask.  If not provided, the existing title is used.
  /// [isCompleted] Optional new completion status for the subtask.  If not provided, the existing status is used.
  Subtask copyWith({String? title, bool? isCompleted}) {
    return Subtask(
      title: title ??
          this
              .title, // Use the provided title if it's not null, otherwise use the existing title.
      isCompleted: isCompleted ??
          this
              .isCompleted, // Use the provided isCompleted if it's not null, otherwise use the existing isCompleted.
    );
  }
}

/// **üîπ To-Do Item Model**
/// Represents a to-do item.  This class defines the structure of a to-do item, including its ID, task, description, due date, due time, subtasks, and completion status.
@HiveType(typeId: 5) // üîπ Unique type ID for Todo.  This ID is used by Hive to store and retrieve objects of this type.  It must be unique across all Hive types in the application.
class Todo {
  @HiveField(0)
  final String id; // üÜî Unique identifier for the to-do item.  This is used to identify the to-do item in the database.  It should never change.

  @HiveField(1)
  String task; // üìù Title of the to-do item.  This is the main text that describes the task.

  @HiveField(2)
  String description; // ‚ÑπÔ∏è Detailed description of the to-do item.  This provides additional information about the task.

  @HiveField(3)
  DateTime dueDate; // üìÖ Date when the to-do item is due.  This is the date that the task should be completed by.

  @HiveField(4)
  String dueTime; // ‚è∞ Time when the to-do item is due.  This is the time of day that the task should be completed by.  Stored as a string.

  @HiveField(5)
  List<Subtask>
      subtasks; // üìå List of subtasks for the to-do item.  This allows breaking down a larger task into smaller, more manageable parts.

  @HiveField(6)
  bool isCompleted; // ‚úÖ Status of the to-do item (true if completed, false otherwise).

  /// Constructor for the Todo class.
  /// [id] The unique identifier for the to-do item.
  /// [task] The title of the to-do item.
  /// [description] The detailed description of the to-do item.
  /// [dueDate] The date when the to-do item is due.
  /// [dueTime] The time when the to-do item is due (stored as a string).
  /// [subtasks] The list of subtasks for the to-do item.
  /// [isCompleted] The completion status of the to-do item.
  Todo({
    required this.id,
    required this.task,
    required this.description,
    required this.dueDate,
    required this.dueTime,
    required this.subtasks,
    required this.isCompleted,
  });

  /// **üîπ Copy Todo with New Values**
  /// Creates a new Todo object with the same values as this one, except for any values that are explicitly overridden.
  /// This is a common pattern in Flutter to allow for efficient updating of immutable objects.
  /// [id] Optional new ID for the to-do item.  If not provided, the existing ID is used.
  /// [task] Optional new title for the to-do item.  If not provided, the existing title is used.
  /// [description] Optional new description for the to-do item.  If not provided, the existing description is used.
  /// [dueDate] Optional new due date for the to-do item.  If not provided, the existing due date is used.
  /// [dueTime] Optional new due time for the to-do item.  If not provided, the existing due time is used.
  /// [subtasks] Optional new list of subtasks for the to-do item.  If not provided, the existing list is used.
  /// [isCompleted] Optional new completion status for the to-do item.  If not provided, the existing status is used.
  Todo copyWith({
    String? id,
    String? task,
    String? description,
    DateTime? dueDate,
    String? dueTime,
    List<Subtask>? subtasks,
    bool? isCompleted,
  }) {
    return Todo(
      id: id ??
          this
              .id, // Use the provided id if it's not null, otherwise use the existing id.
      task: task ??
          this
              .task, // Use the provided task if it's not null, otherwise use the existing task.
      description: description ??
          this
              .description, // Use the provided description if it's not null, otherwise use the existing description.
      dueDate: dueDate ??
          this
              .dueDate, // Use the provided dueDate if it's not null, otherwise use the existing dueDate.
      dueTime: dueTime ??
          this
              .dueTime, // Use the provided dueTime if it's not null, otherwise use the existing dueTime.
      subtasks: subtasks ??
          this
              .subtasks, // Use the provided subtasks if it's not null, otherwise use the existing subtasks.
      isCompleted: isCompleted ??
          this
              .isCompleted, // Use the provided isCompleted if it's not null, otherwise use the existing isCompleted.
    );
  }
}

